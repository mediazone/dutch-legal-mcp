name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20, 22]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run type checking
        run: npx tsc --noEmit
        
      - name: Run tests
        run: npm test
        
      - name: Build project
        run: npm run build
        
      - name: Upload build artifacts
        if: matrix.node-version == '20'
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  auto-release:
    name: Auto Release
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
      - name: Check if version bump needed
        id: version_check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if this version exists on NPM
          if npm view @mediazone/dutch-legal-mcp@$CURRENT_VERSION version >/dev/null 2>&1; then
            echo "version_exists=true" >> $GITHUB_OUTPUT
            echo "Version $CURRENT_VERSION already exists on NPM"
          else
            echo "version_exists=false" >> $GITHUB_OUTPUT
            echo "Version $CURRENT_VERSION is new"
          fi
        
      - name: Auto-bump version
        if: steps.version_check.outputs.version_exists == 'true'
        run: |
          echo "Auto-bumping version because current version already exists on NPM"
          npm version patch --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          git add package.json package-lock.json
          git commit -m "ðŸ”– Auto-bump version to v$NEW_VERSION

          ðŸš€ Automatic version bump to prevent NPM conflicts
          ðŸ“¦ Previous version already published
          ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"
          git push origin main
        
      - name: Set version for release
        run: |
          if [ -z "$NEW_VERSION" ]; then
            echo "VERSION=${{ steps.version_check.outputs.current_version }}" >> $GITHUB_ENV
          else
            echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          fi
        
      - name: Create git tag
        run: |
          echo "Checking if tag v$VERSION exists..."
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists locally - skipping"
          elif git ls-remote --tags origin | grep "refs/tags/v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists on remote - skipping"
          else
            echo "Creating new tag v$VERSION"
            git tag "v$VERSION"
            git push origin "v$VERSION"
          fi

